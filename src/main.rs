extern crate regex;
extern crate crc;

use regex::Regex;
use crc::{crc32, Hasher32};

fn main() {
//    let res = shingles("sdsdsd".to_string(), "sdsdsd".to_string());
//    println!("{}", res);

    let len = 10;
    let text = "<p><hc id=\"hc_select_index44\" class=\"hc_select_index\"></hc> По решению суда детский сад закрыт на 20 суток.</p> Они выявили, что для внутренней отделки стен  в группе использовались обои, не допускающие проведение влажной уборки и дезинфекции; стены в мясо-рыбном цехе пищеблока имеют отделку, не позволяющую проводить дезинфекцию, осыпается штукатурка с краской; на потолках подтеки; полы из деревянных досок неровный, с щелями, что способствует проникновению грызунов и насекомых; стекла на окнах с трещинами, заклеены скотчем.";
    let res = canonisation(text);
    let v: Vec<&str> = res.split_whitespace().collect();

    let n = shingles(&v, len);

//    let proposal = Regex::new(r"(?i)[a-ля|без|ведома|безо|благодаря|[в|по]?близ[ко|и]?|[в]?виде|течение|ввиду|вглубь|вдогонку|вдоль|взамен|включая|вкруг|вместо|вне|внизу|внутр[и|ь]|вовнутрь|вне|внизу|внутр[и|ь]|вовнутрь|возле|вокруг|вопреки|вослед|впереди|вплоть|впредь|вразрез|вроде|вслед[ствие]?|для|за[место]?|вычетом|исключением|счёт|из[-за|-под|нутри|о]?|исходя|к[асательно|о|роме|ругом]?|меж[ду]?|мимо|на[верху|вроде|встречу|д|до|зад|кануне|перекор|перерез|подобие|против|ряду|супротив|счёт|чиная]?|не[смотря]?|ниже|обо[к]?|около|ото|относительно|перед[о]|по-[за|над|под]?|по[близости|верх|д|дле|до|добно|зади|зднее|мимо|перёд|перёк|рядка|середине|середь|сле|среди|средине|средством]?|пред[о]?|пр[и|о|отив]?|ради|рядом|сверх[у]?|свыше|середь|сзади|сквозь|снизу|согласно|спустя|сред[и|ь]?|сродни|судя|супротив|ч[е]?рез]").unwrap();
    println!("{}", n);
}

fn shingles(x: &Vec<&str>, len: usize) -> usize {
    let mut out: Vec<&str>;
    for i in 0..(x.len()-len+1) {
        let mut buf = String::new();
        for y in i..i+len {
            buf = buf + " " + x[y];
        }
        let bytes: &[u8] = buf.as_bytes();

        let hash = crc32::checksum_ieee(bytes);
        println!("{} - {:?}", buf, hash);
    }

//    for z in out {
//        println!("{}", z);
//    }
    1
}


fn canonisation(text: &str) -> String {
    let html = Regex::new(r"<[^>]*>|[:punct:]").unwrap();
    let stopWords = Regex::new(r"(?i)\b[а-я]{1,2}\b").unwrap();

    let mut res = html.replace_all(text, "");
    res = stopWords.replace_all(&res, "");
    res
}






